const BASE_URL="https://story-api.dicoding.dev/v1",StoryModel={async login(t,e){try{const o=await fetch(`${BASE_URL}/login`,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({email:t,password:e})}),r=await o.json();if(r.error)throw new Error(r.message);return localStorage.setItem("token",r.loginResult.token),localStorage.setItem("userId",r.loginResult.userId),localStorage.setItem("name",r.loginResult.name),r}catch(t){throw t}},async register(t,e,o){try{const r=await fetch(`${BASE_URL}/register`,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({name:t,email:e,password:o})}),a=await r.json();if(a.error)throw new Error(a.message);return a}catch(t){throw t}},logout(){localStorage.removeItem("token"),localStorage.removeItem("userId"),localStorage.removeItem("name")},async getAllStories(t=1,e=10,o=0){try{let r=`${BASE_URL}/stories?page=${t}&size=${e}&location=${o}`;const a={},n=localStorage.getItem("token");n&&(a.Authorization=`Bearer ${n}`);const s=await fetch(r,{headers:a}),i=await s.json();if(i.error)throw new Error(i.message);return i.listStory}catch(t){throw t}},async getStoryDetail(t){try{const e=localStorage.getItem("token"),o=await fetch(`${BASE_URL}/stories/${t}`,{headers:{Authorization:`Bearer ${e}`}}),r=await o.json();if(r.error)throw new Error(r.message);return r.story}catch(t){throw t}},async addStory(t,e,o,r){try{const a=new FormData;a.append("description",t),a.append("photo",e),o&&r&&(a.append("lat",o),a.append("lon",r));let n=`${BASE_URL}/stories`;const s={},i=localStorage.getItem("token");i?s.Authorization=`Bearer ${i}`:n=`${BASE_URL}/stories/guest`;const c=await fetch(n,{method:"POST",headers:s,body:a}),l=await c.json();if(l.error)throw new Error(l.message);return l}catch(t){throw t}},async subscribeNotification(t){try{const e=localStorage.getItem("token"),o=await fetch(`${BASE_URL}/notifications/subscribe`,{method:"POST",headers:{"Content-Type":"application/json",Authorization:`Bearer ${e}`},body:JSON.stringify({endpoint:t.endpoint,keys:{p256dh:btoa(String.fromCharCode.apply(null,new Uint8Array(t.getKey("p256dh")))),auth:btoa(String.fromCharCode.apply(null,new Uint8Array(t.getKey("auth"))))}})}),r=await o.json();if(r.error)throw new Error(r.message);return r}catch(t){throw t}},async unsubscribeNotification(t){try{const e=localStorage.getItem("token"),o=await fetch(`${BASE_URL}/notifications/subscribe`,{method:"DELETE",headers:{"Content-Type":"application/json",Authorization:`Bearer ${e}`},body:JSON.stringify({endpoint:t.endpoint})}),r=await o.json();if(r.error)throw new Error(r.message);return r}catch(t){throw t}}};export default StoryModel;